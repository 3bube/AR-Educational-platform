/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: BlackCube (https://sketchfab.com/blackcube4)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/crucial-8-gb-ddr4-2133-ram-6fa0d3b8c5684741be7d7e396e01bc9f
Title: Crucial 8 GB DDR4 2133 RAM
*/


import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei/native'
import { GLTF } from 'three-stdlib'


type GLTFResult = GLTF & {
  nodes: {
    RAM_Side_0: THREE.Mesh
    RAM_Front_0: THREE.Mesh
    RAM_Silver_0: THREE.Mesh
    RAM_Bronze_0: THREE.Mesh
    RAM_Sticker_0: THREE.Mesh
    RAM_Storage_0: THREE.Mesh
  }
  materials: {
    Side: THREE.MeshStandardMaterial
    Front: THREE.MeshPhysicalMaterial
    Silver: THREE.MeshStandardMaterial
    Bronze: THREE.MeshStandardMaterial
    Sticker: THREE.MeshStandardMaterial
    Storage: THREE.MeshStandardMaterial
  }
}


export default function Ram(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(require ( '../models/RamApp')) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <group rotation={[Math.PI / 2, 0, Math.PI]} scale={100}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Side_0.geometry}
            material={materials.Side}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Front_0.geometry}
            material={materials.Front}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Silver_0.geometry}
            material={materials.Silver}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Bronze_0.geometry}
            material={materials.Bronze}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Sticker_0.geometry}
            material={materials.Sticker}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RAM_Storage_0.geometry}
            material={materials.Storage}
          />
        </group>
      </group>
    </group>
  )
}


useGLTF.preload(require ( '../assets/Ram.glb') );
